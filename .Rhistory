source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
?for
()
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1:10)
source("complete.R")
complete("specdata", 1:10)
source("complete.R")
complete("specdata", 1)
complete("specdata", 1:10)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
submit()
6
submit()
submit()
return_vector<-numeric()
return_vector
return_vector<-c(numeric_vector, 0.2334)
return_vector<-c(return_vector, 0.2334)
return_vector
return_vector<-c(return_vector, 0.11)
return_vector
for (i in 1:332) {
}
for (i in 1:332) {
}
?cor
scrubbed_lines<=data.frame("Date"=date(),"sulfate"=numeric(),"nitrate"=numeric(),"ID"=numeric()
)
scrubbed_lines<-data.frame("Date"=date(),"sulfate"=numeric(),"nitrate"=numeric(),"ID"=numeric())
?date
scrubbed_lines<=data.frame("Date"=numeric(),"sulfate"=numeric(),"nitrate"=numeric(),"ID"=numeric())
scrubbed_lines<-data.frame("Date"=numeric(),"sulfate"=numeric(),"nitrate"=numeric(),"ID"=numeric())
file[20,]
a<-rbind(scrubbed_lines, file[20,])
a
?cor
source("corr.R")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
l<-c(l,0.123)
l<-numeric()
l
l<-c(l, 0.12)
l
l<-c(l, 0.1344)
l
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
length(cr)
summary(cr)
source("corr.R")
cr <- corr("specdata", 150)
submit()
submit()
submit()
?lapply
a(1232. 3132, 1234)
getwd()
setwd("/Users/Dropbox/MongoHQ_Dumped_Reports")
janinv<-read.csv(./txt\ files/invoices\ 2013_01.txt)
janinv<-read.csv(./txt/invoices 2013_01.txt)
janinv<-read.csv("./txt/invoices 2013_01.txt")
janinv<-read.csv("./txt files/invoices 2013_01.txt")
janinv
summary(janinv)
janinv[account_id]
x<-matrix(rnorm(200), 20 , 10)
x
apply(x, 2, mean)
dim(x)
apply(x, 1, sum)
options()
options(prompt=$)
options(prompt='$')
34
options(prompt='>')
?glm
?jitter
formalArgs(jitter)
formalargs(glm)
formalArgs(glm)
formalArgs(mean
)
jitter
mean
'-'
?install.packages
install.packages("SoDA")
library(datasets)
data(iris)
?iris
head(iris)
iris
split(iris, virginica)
?split
? gl
s<-split(iris, iris$Species)
s
colmeans(s)
?colmeans
?colMeans
colMeans(s)
s[virginica]
s$virginica
colMeans(s$virginica)
s$virginica[Sepal.Length]
v<-s$virginica
head(v)
v[Sepal.Length]
v[1]
v["Sepal.Length"]
s
s$virginica["Sepal.Length"]
colMeans(s$virginica["Sepal.Length"])
colMeans(iris)
?apply
iris[, 1:4]
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mtcars[2:6]
?split
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
d<-sapply(split(mtcars$hp, mtcars$cyl), mean)
d
d$8-d$4
d$"8"-d$"4"
d[1]
d[3]-d[1]
itis
iris
split(iris$"Sepal.Length", iris$"Species")
s<-split(iris$"Sepal.Length", iris$"Species")
s
s$virginica
mean(s$virginica)
?tapply
tapply(s$virginica, mean)
tapply(iris, mean)
tapply(iris$"Sepal.Length", mean)
iris$"Sepal.Length"
?'<<-'
getwd()
x<-10
get<-function() x
get()
get<-function() {x}
get()
get<-function() {return x}
get<-function() {return (x)}
get()
m<-matrix(3, 3)
m
?matrix
m<-matrix(1:9, 3,3)
m
solve(m)
?solve
solve(m)
m<-matrix(2:5,2,2)
m
solve(m)
source(jan13.txt)
jan<-source("jan13.txt")
?source
getwd()
jan<-read.csv("/txt_files/invoices 2013_01.txt")
jan<-read.csv("./txt_files/invoices 2013_01.txt")
head jan
jan
head(jan)
jrev<-jan$amount
jrev(mean)
mean(jrev)
count(jrev)
sum(jrev)
max(jrev)
min(jrev)
jrev$balance
summary(jrev)
m<-matrix((4, 3, 3, 2)2, 1)
m<-matrix((4, 3, 3, 2),2, 2)
?matrix
a<-(4, 3, 3, 2)
m<-matrix(data=(4, 3, 3, 2), 2, 2)
m<-matrix(c(4, 3, 3, 2),2, 2)
m
solve(m)
m<-matrix(c(1,2,3,0,4,5,1,0,6), 3, 3)
m
m<-matrix(c(1,2,3,0,4,5,1,0,6), 3, 3, byrow=TRUE)
m
solve(m)
include "cachematrix.R"
source("cachematrix.R"")
cacheSolve(m)
)
))
)
w
w""
getwd()
source("./pras2/ProgrammingAssignment2/cachematrix.R")
cacheSolve(m)
m
makeCacheMatrix(m)
source("./pras2/ProgrammingAssignment2/cacheMean.R")
a<-makeVector(c(1,2, 3, 4))
a$get
a$get()
b<-makeCacheMatrix(m)
b$get()
cacheSolve(b)
cachemean(a)
a$getmean()
cachemean(a)
b$getInverse()
cacheSolve(b)
debug
debug()
source("./pras2/ProgrammingAssignment2/cachematrix.R")
b<-makeCacheMatrix(m)
cacheSolve(b)
b$get()
solve(b$get())
source("./pras2/ProgrammingAssignment2/cachematrix.R")
b<-makeCacheMatrix(m)
cacheSolve(b)
b$get()
source("./pras2/ProgrammingAssignment2/cachematrix.R")
b<-makeCacheMatrix(m)
cacheSolve(b)
source("./pras2/ProgrammingAssignment2/cachematrix.R")
b<-makeCacheMatrix(m)
cacheSolve(b)
solve(m)
source("./pras2/ProgrammingAssignment2/cachematrix.R")
b<-makeCacheMatrix(m)
cacheSolve(b)
source("./pras2/ProgrammingAssignment2/cachematrix.R")
b<-makeCacheMatrix(m)
cacheSolve(b)
cacheSolve(b)
t2<-matrix(c(4, 3, 3, 2), 2, 2, byrow=TRUE)
t3<-makeCacheMatrix(t2)
cacheSolve(t3)
cacheSolve(b)
cacheSolve(t3)
cacheSolve(t3)
cacheSolve(b)
dim(b)
lengthb
length(b)
dim(jan)
jan[1,]
is.matrix(jan)
length(jan$id)
?lapply
x<-list(a=1:5, b=rnorm(10))
lapply(x, mean)
?split
?gl
gl(3, 10)
x<-c(rnorm(10), runif(10), rnorm(10,1))
f<-gl(3, 10)
split (x, f)
x
?split
split(jan$amount, jan$account_billing_method)
bt<-split(jan$amount, jan$account_billing_method)
dim(bt)
bt
bt$comped
bt$invoice
sum(bt$invoice)
sum(bt$stripe)
totaljan<-sum(bt$invoice)+sum(bt$stripe)
total
totaljan
apply(bt, sum)
?apply
lapply(bt, sum)
sapply(bt, sum)
str(jan)
srt(a)
str(a)
a
?str
a<-f7dbbc558b2eb9229f15291cc95ada93f6c85737
a<-"f7dbbc558b2eb9229f15291cc95ada93f6c85737"
b<-"f7dbbc558b2eb9229f15291cc95ada93f6c85737"
identical(a,b)
a<-"4209d1138ef28e95dec251f252a9ce118e6c867d"
b<-"4209d1138ef28e95dec251f252a9ce118e6c867d"
identical(a,b)
a<-"f1143f47df5dd19faa0e44dea3ec7795afbc8f06"
b<-"f1143f47df5dd19faa0e44dea3ec7795afbc8f06"
indentical(a,b)
identical(a,b)
a<-"631542ae31e47372f9690aac533b919fd9e34556"
b<-"631542ae31e47372f9690aac533b919fd9e34556"
identical(a,b)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5+2*x+e
plot(x,y)
plot(rnorm(1000))
sample(letters, 9)
?oath_endpoints)_
?oath_endpoints()
?httr
??httr
install.packages("RMySQL")
library(RMySQL)
library("RMySQL")
getwd()
library(datasets)
data(cars)
with(cars, plot(speed, distance))
with(cars, plot(speed, dist))
View(cars)
library(lattice)
state<-data.frame(state.x77, region=state.region)
View(state)
state.x77
state.Population
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
library(ggplot2)
View(mpg)
data(mpg)
qplot(displ, hwy, data=mpg)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
?transform
?par
x<-rnorm(100)
hist(x)
y<-rnorm(1000)
plot(x,y)
y<-rnorm(100)
plot(x,y)
par(mar=c(2, 2, 2, 2))
par(mar=c(1, 1, 1, 1))
plot(x,y, pch=20)
par(mar=c(2, 2, 2, 2))
plot(x,y, pch=20)
par("mar")
par(mar=c(2, 4, 2, 4))
plot(x,y, pch=20)
par(mar=c(4, 4, 4, 4))
plot(x,y, pch=20)
par(mar=c(4, 8, 4, 8))
plot(x,y, pch=20)
quartz()
?Devices
getwd()
getwd()
setwd("./users/navam/documents/r/compose_customers")
setwd("/users/navam/documents/r/compose_customers")
getwd()
source("load.R")
View(combined_data)
source("clean_comped.R")
source("clean_comped.R")
source("clean_comped.R")
View(combined_data)
names(combined_data)
names(combined_data)
source("clean_comped.R")
source('new_platform_arr.R')
names(combined_data)
source('new_platform_arr.R')
View(seperated_arr)
View(combined_data)
?writecsv
?writeCSV
?read.csv
?write.csv
source("clean_comped.R")
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
unique_table
source("staticpools.R")
source("staticpools.R")
unique(combined_data$month)
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
source("staticpools.R")
m<-combined_data[combined_data$month=="mar"]
m<-combined_data[combined_data$month=="mar",]
write.csv(m, "marchtest.csv")
m<-readRDS("combined_data_clean.RDS")
write.csv(m, "scrubtest.csv")
source("staticpools.R")
source("arr_by_type.R")
source("arr_by_type.R")
source("staticpools.R")
View(con_sku)
a<-con_sku[con_sku$month=='oct', ]
View(a)
b<-a[a$type=='new',]
View(b)
sum(b$arr)
source("staticpools.R")
source("staticpools.R")
getwd()
bill<-read.csv("billables.csv")
View(bill)
unique(bill$group_id)
str(bill)
library(lubridate)
bill<-transform(bill, sku_end_at=ymd_hms(sku_end_at))
?transform
bill<-transform(bill, sku_end_at=ymd_hms(end_at))
bill<-read.csv("billables.csv")
bill<-transform(bill, sku_end_at=ymd_hms(end_at))
View(bill)
bill<-transform(bill, sku_start_at=ymd_hms(start_at))
View(bill)
source("arr_by_type.R")
getwd()
setwd("/Users/navam/documents/r/rep_research")
activity<-read.csv("activity.csv", header=TRUE)
View(arr_table)
View(activity)
?date
str(activity)
library(lubridate)
activity_clean<-transform(activity, date=ymd(date))
str(activity_clean)
activity_clean<-activity_clean[!is.na(activity_clean$steps)]
activity_clean<-activity_clean[!is.na(activity_clean$steps),]
str(activity_clean)
summary(activity_clean$steps)
tapply(activity_clean$steps, activity_clean$date, mean)
a<-data.frame(tapply(activity_clean$steps, activity_clean$date, mean))
a
?hist
hist(activity_clean)
hist(activity_clean$steps)
hist(activity_clean$steps, main="Histogram of total steps taken per day"
)
hist(activity_clean$steps, main="Histogram of total steps taken per day")
hist(activity_clean$steps, main="Histogram of total steps taken per day", xlab="steps")
steps_per_day<-with(activity_clean, tapply(steps, date, mean))
steps_per_day<-data.frame(with(activity_clean, tapply(steps, date, mean)))
?colnames
colnames(steps_per_day)<-c("date", "total.steps")
colnames(steps_per_day)<-"total.steps"
head(steps_per_day)
hist(steps_per_day)
str(steps_per_day)
str(steps_per_day$total.steps)
hist(steps_per_day$total.steps)
steps_per_day<-data.frame(with(activity_clean, tapply(steps, date, sum)))
colnames(steps_per_day)<-"total.steps"
hist(steps_per_day$total.steps)
## Loading and preprocessing the data
mean(steps_per_day$total.steps)
median(steps_per_day$total.steps)
